name: Python CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          curl -LsSf https://astral.sh/uv/install.ps1 -o install-uv.ps1
          powershell -executionpolicy bypass -File install-uv.ps1
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        else
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        fi
    
    - name: Cache uv environments
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.local/share/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      shell: bash
      run: |
        uv venv
        uv pip install -e ".[dev]"
    
    - name: Test with pytest
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    # Only build package on tags or main branch
    if: success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install build dependencies
      run: |
        uv venv
        uv pip install build twine
    
    - name: Build package
      run: |
        source .venv/bin/activate
        python -m build
    
    - name: Check package
      run: |
        source .venv/bin/activate
        twine check dist/*
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    needs: test
    runs-on: ubuntu-latest
    # Always build, but conditionally push
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long
    
    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Generate artifact attestation
      if: github.event_name == 'release'
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ghcr.io/${{ github.repository }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
